{"name":"ggnet","tagline":"Simple network plots with ggplot2 in R.","body":"# ggnet: simple network plots with ggplot2\r\n\r\nThis function is part of the [GGally][ggally] package. Install it from CRAN or from GitHub:\r\n\r\n    install.packages(\"GGally\", type = \"source\")\r\n    devtools::install_github(\"ggally\", \"ggobi\")\r\n\r\n[ggally]: https://github.com/ggobi/ggally\r\n\r\n![French MPs on Twitter](example1.png)\r\n\r\nA plot of Twitter connexions between 339 French MPs currently in office, colored by parliamentary groups and quartile-weighted by degree. See [`functions.R`][fn] for network exploration routines. Data assembled by scraping a few web sources in May 2013 with the help of [Jonathan Chibois][jc] and Benjamin Ooghe-Tabanou from [Regards Citoyens][rc]. My [blog post at Polit'bistro][pb] has more details.\r\n\r\n[bc]: http://coulmont.com/index.php?s=d%C3%A9put%C3%A9s\r\n[jc]: http://laspic.hypotheses.org/\r\n[rc]: http://www.regardscitoyens.org/\r\n[eg]: http://freakonometrics.blog.free.fr/index.php?post/Twitter-deputes\r\n[fn]: functions.R\r\n[pb]: http://politbistro.hypotheses.org/1752\r\n\r\n## HOWTO\r\n\r\nThe functions builds on [Moritz Marbach][mm-gh]'s [`plotg()`][mm] function and accepts the following arguments:\r\n\r\n    ggnet(net,                          # an object of class network\r\n          mode = \"fruchtermanreingold\", # placement algorithm\r\n          size = 12,                    # node size\r\n          alpha = .75,                  # transparency\r\n          weight.method = \"none\",       # what to weight the nodes with: \"degree\", \"indegree\", \"outdegree\"\r\n          names = c(\"\", \"\"),            # what to call the node color and node weight legends\r\n          node.group = NULL,            # what to color the nodes with\r\n          node.color = NULL,            # what colors to use for the node classes\r\n          node.alpha = NULL,            # transparency for nodes (inherits from alpha)\r\n          segment.alpha = NULL,         # transparency for links (inherits from alpha)\r\n          segment.color = \"grey\",       # default links are rgb(190, 190, 190)\r\n          segment.size  = .25,          # set to 0 to remove from plot\r\n          arrow.size = 0,               # set to 0 to remove from plot\r\n          label.nodes = FALSE,          # add vertex names in small print; can be a list of vertex names\r\n          top8.nodes  = FALSE,          # color the top 8 nodes by weighting method with ColorBrewer Set1\r\n          trim.labels = TRUE,           # remove '@', 'http://' and 'www.' from vertex names\r\n          quantize.weights = FALSE,     # break weights to quartiles\r\n          subset.threshold = 0,         # what nodes to exclude, based on weight.method â‰¥ subset\r\n          legend.position = \"right\",    # set to \"none\" to remove from plot\r\n          ...)                          # arguments passed to node labels with geom_text()\r\n\r\n[mm]: http://sumtxt.wordpress.com/2011/07/02/visualizing-networks-with-ggplot2-in-r/\r\n[mm-gh]: https://github.com/sumtxt\r\n\r\nThe function needs an object of class `network` and automatically handles the conversion of objects of class `igraph` by calling the [`intergraph`][ig] package. It supports all placement algorithms available through the `sna` package. The code has been submitted to the [`GGally`][gg] package.\r\n\r\n[ig]: http://intergraph.r-forge.r-project.org/\r\n[gg]: https://github.com/ggobi/ggally\r\n\r\n## DEMO\r\n\r\nThe `ggnet()` function returns a `ggplot` object in which nodes are represented by points that can be colored and/or weighted using proportional scaling. The network above can therefore be set to look like this when the segments are not drawn and the nodes are weighted by indegree and left uncolored:\r\n\r\n![](example2.png)\r\n\r\n    ggnet(net, \r\n          size = 6, \r\n          segment.size = 0, \r\n          weight = \"indegree\", \r\n          legend = \"none\") + \r\n      geom_density2d()\r\n\r\nThe node colors are set through a group variable colored by a discrete palette. Node groups can be any vector containing as many items as there are nodes in the network. Hence, to verify that the dual structure shown above corresponds to the left-right party divide, we group nodes by a logical value and let the function select from the default `Set1` scheme to discriminate them:\r\n\r\n![](example3.png)\r\n\r\n    rightwing = ifelse(mp.groups == \"NI\", NA, mp.groups %in% c(\"UDI\", \"UMP\"))\r\n    ggnet(net, \r\n          node.group = rightwing, \r\n          alpha = .25, \r\n          name = \"Rightwing group\")\r\n\r\nThe function can also label all or a selection of nodes, identified by vertex names. See, for example, how party polarization is much less obvious when you look at a single individual's network (Nathalie Kosciusko-Morizet in this example, the rightwing candidate for the mayor of Paris in the next municipal election):\r\n\r\n![](example4.png)\r\n\r\n    follows.nkm = ids$Twitter %in% who.follows(df, \"nk_m\")$followers\r\n    ggnet(net, \r\n          size = 6, \r\n          node.group = follows.nkm, \r\n          alpha = .25, \r\n          name = \"Follows NKM\",\r\n          label = \"nk_m\", \r\n          color = \"black\")\r\n\r\nThe function contains a few examples with small random networks, as well as an example using the [city and service firms dataset][cs] that is [also available][pj] in Pajek. The visualization below uses the Kamada-Kawai placement algorithm with no node weighting, a few node labels and a default three-color scheme built from ColorBrewer's `Set1`:\r\n\r\n[cs]: http://networkdata.ics.uci.edu/netdata/html/cities.html\r\n[pj]: http://vlado.fmf.uni-lj.si/pub/networks/data/\r\n\r\n![](http://f.hypotheses.org/wp-content/blogs.dir/42/files/2013/06/cities.png)\r\n\r\n    url = url(\"http://networkdata.ics.uci.edu/netdata/data/cities.RData\")\r\n    print(load(url))\r\n    close(url)\r\n    type = network::get.vertex.attribute(cities, \"type\")\r\n    type = ifelse(grepl(\"City|Law\", type), gsub(\"I+\", \"\", type), \"Firm\")\r\n    ggnet(cities,\r\n          mode = \"kamadakawai\",\r\n          alpha = .2,\r\n          node.group = type,\r\n          label = c(\"Paris\", \"Beijing\", \"Chicago\"),\r\n          color = \"darkred\")\r\n\r\nSome of the more experimental arguments like `subset.threshold` and `top8.nodes`, which highlight the most central nodes of a network, are shown in the [code][vo] for a [conference paper][bg] using online network data collected with [VOSON][vs]:\r\n\r\n![](https://github.com/briatte/afsp2013/raw/master/figure.png)\r\n\r\n[co]: https://github.com/briatte/afsp2013/blob/master/voson.R\r\n[bg]: https://github.com/briatte/afsp2013\r\n[vs]: http://voson.anu.edu.au/\r\n[vo]: https://github.com/briatte/afsp2013/blob/master/voson.R\r\n\r\nFinally, Pedro Jordano has [suggested][issue-3] adding support for bipartite networks. While `ggnet` draws only \"simple\" one-mode networks at the moment, it can also mimick two-mode networks, as shown in [this example][neta], using amendment co-sponsorships in the lower chamber of the French Parliament:\r\n\r\n![](example5.png)\r\n\r\n    # manipulate vertex labels\r\n    i = network.vertex.names(net)\r\n    # remove labels from actor nodes\r\n    i[1:min(which(!is.na(as.numeric(i)))) - 1] = NA\r\n    # mock bipartite network\r\n    ggnet(net, size = 0, node.group = is.na(i)) + \r\n      geom_point(alpha = .5, aes(size = ifelse(is.na(i), 1, 3))) + \r\n      scale_size_area(\"\", max_size = 6) +\r\n      theme(legend.position = \"none\")\r\n\r\n[issue-3]: https://github.com/briatte/ggnet/issues/3\r\n[neta]: https://github.com/briatte/neta\r\n\r\n(The code snippet above is a practical hack. There is far better code to produce authentic bipartite plots out of sparse matrix objects in the [dedicated repository][neta] for this example.)\r\n\r\n## CREDITS\r\n\r\nInspired by [Baptiste Coulmont][bc] and [Ewen Gallic][eg].\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}